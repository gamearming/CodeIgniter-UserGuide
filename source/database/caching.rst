######################
資料庫快取類別
######################

資料庫快取類別允許將資料庫查詢的結果儲存到文字檔案中，來降低資料庫存取的負荷。

.. important:: 當啟用快取時，本類會被資料庫驅動自動載入，切勿手動載入。
.. important:: 並非所有查詢結果都能被快取，請仔細閱讀本頁內容。

啟用快取
================
啟用快取需要三步驟：

- 在伺服器建立可寫入的資料夾，儲存快取檔案(例： cache)。
- 通過文件 application/config/database.php 中的 $db['default']['cachedir'] = 'cache'; 設定成相應資料夾。
- 通過文件 application/config/database.php 中的 $db['default']['cache_on'] = TRUE;，也可以用下面的成員函數手動設定。

一旦快取啟用，每次載入頁面時，只要該頁面含有資料庫查詢語句就會自動快取。

快取是如何工作的？
======================

- 當系統設定資料庫快取設定時，只要存取有關資料庫查詢的頁面時，就會自動啟動資料庫快取系統。
- 頁面第一次載入時，會將結果物件序列化並儲存到快取資料夾的相應檔案，在下次存取時，會優先存取快取檔案而不是資料庫，藉以降低資料庫的存取。
- 只有唯讀類型的語句才會快取（SELECT），因為這類型的語句才會產生結果，而寫入類型的語句，因為不會產生結果所以不會被快取（INSERT、UPDATE 等）。
- 快取檔案永不過期，所有的查詢只要快取後，除非刪除它們否則將持續使用。
- 當某些事件發生時，可以針對特定的頁面來刪除或清空快取，下面會介紹如何來清除快取（例如： 新增/更新 資料庫）。

快取能夠提升網站的性能嗎？
=============================================
快取能否獲得性能增益，取決於很多因素。

例如：

- 低負荷且高度最佳化的資料庫作用不大。
- 資料庫頻繁的存取，那麼快取的性能就有顯著的提升，前提檔案系統並沒有太多的負荷。
- 要記住快取只是簡單的改變了資料讀取的模式而已，從存取資料庫變成檔案系統而已。

例如：

- 在叢集伺服器環境中，檔案系統使用過於頻繁，快取會加重主機負荷。
- 在共享的單一伺服器環境中，快取能有效的降低負荷。
- 是否需要快取資料庫，完全取決於您的專案設計。

快取檔案是如何儲存的？
===========================
CodeIgniter 將每個查詢語句都快取到唯一的檔案中，依據呼叫的控制器及成員函組織到相應的子資料夾中。
子資料夾是取用 URI 的前兩段控制器和成員函數名稱命名的。

例如：

- 您有 blog 控制器和 comments 成員函數，且有三個不同的查詢語句，則快取系統將會建立名稱為 blog+comments 的資料夾，並在該資料夾產生三個快取檔案。
- 如果 URI 中含有動態查詢時（例如使用分頁時），則每個查詢語句都會產生唯一的快取檔案，因此可能會出現比您查詢次數多出好幾倍的情況。

管理您的快取檔案
=========================
由於快取檔案不會過期，那麼應用程式中就應該有刪除快取的機制。

例如：

- 您的部落格允許用戶評論，每當送出新評論時，都應該刪除顯示評論控制器成員函數對應的快取檔案。
- 不是所有的資料庫成員函數都使用快取系統
- 下面將介紹有兩種不同的成員函數用來刪除快取資料。

============================================


最後我們必須得指出被快取的結果物件只是簡化版的結果物件。

以下是無法使用快取系統的成員函數：

-  num_fields()
-  field_names()
-  field_data()
-  free_result()

同時 result_id 和 conn_id 也無法使用，因為這兩個 id 僅適用於即時資料庫的存取。

******************
函數參考
******************

$this->db->cache_on() / $this->db->cache_off()
================================================

用於手工啟用/停用快取，當您不想快取某些查詢時，這兩個成員函數很有用。

範例::

	// Turn caching on
	$this->db->cache_on();
	$query = $this->db->query("SELECT * FROM mytable");
	
	// Turn caching off for this one query
	$this->db->cache_off();
	$query = $this->db->query("SELECT * FROM members WHERE member_id = '$current_user'");
	
	// Turn caching back on
	$this->db->cache_on();
	$query = $this->db->query("SELECT * FROM another_table");

$this->db->cache_delete()
==========================

刪除特定頁面的快取檔案，當您更新資料庫之後需要清除快取時很有用。

快取系統依據存取頁面的 URI 來決定相應的快取檔案。

例如：

在存取 example.com/index.php/blog/comments 這個頁面，快取系統會將快取檔案儲存到 blog+comments 資料夾下，要刪除這些檔案，

可以使用::

	$this->db->cache_delete('blog', 'comments');

如果沒有提供任何參數，只會清除目前 URI 對應的快取檔案。

$this->db->cache_delete_all()
===============================

清除所有的快取檔案。

例如::

	$this->db->cache_delete_all();

